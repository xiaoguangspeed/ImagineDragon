// 派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 
// 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。

// 公共，私有与受保护的修饰符
// TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。
// 当我们比较带有 private或 protected成员的类型的时候，情况就不同了。
// protected成员在派生类中仍然可以访问。
// 构造函数也可以被标记成 protected。 这意味着这个类不能在包含它的类外被实例化，但是能被继承
// 参数属性可以方便地让我们在一个地方定义并初始化一个成员。 
// 静态属性
// 抽象类
//   - 抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。
//  不同于接口，抽象类可以包含成员的实现细节。 abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法。
// 我们可以认为类具有 实例部分与 静态部分这两个部分。